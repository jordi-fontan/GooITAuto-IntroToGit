WEBVTT

1
00:00:07.640 --> 00:00:10.230
Imagine a colleague
sends you a script with

2
00:00:10.230 --> 00:00:12.810
a bug and asked you to
help fix the issue.

3
00:00:12.810 --> 00:00:15.270
Once you understood what
was wrong with the script,

4
00:00:15.270 --> 00:00:17.910
you could describe to them
what they need to change.

5
00:00:17.910 --> 00:00:19.620
Something like, "Well, you can

6
00:00:19.620 --> 00:00:21.735
only return values
inside functions.

7
00:00:21.735 --> 00:00:24.330
I think you meant to
use sys.exit instead.

8
00:00:24.330 --> 00:00:27.090
Also, you're converting
to gigabytes twice,

9
00:00:27.090 --> 00:00:28.770
so your script will always fail."

10
00:00:28.770 --> 00:00:30.630
But this could still
be hard for them to

11
00:00:30.630 --> 00:00:32.805
understand if the
code is complex.

12
00:00:32.805 --> 00:00:34.405
To make the change clear,

13
00:00:34.405 --> 00:00:36.710
you could send them a diff
with the change so that

14
00:00:36.710 --> 00:00:39.230
they can see what the
modified code looks like.

15
00:00:39.230 --> 00:00:42.860
To do this, we typically use
a command line like diff-u

16
00:00:42.860 --> 00:00:48.380
old_file new_ file > change.diff.

17
00:00:48.380 --> 00:00:51.080
As a reminder, the
greater than sign

18
00:00:51.080 --> 00:00:54.185
redirects the output of the
diff command to a file.

19
00:00:54.185 --> 00:00:55.640
So with this command,

20
00:00:55.640 --> 00:00:57.110
we're generating a file called

21
00:00:57.110 --> 00:01:01.715
change.diff with the
contents of diff-u command.

22
00:01:01.715 --> 00:01:03.935
By using the -u flag,

23
00:01:03.935 --> 00:01:06.710
we include more context
which helps the person

24
00:01:06.710 --> 00:01:08.300
reading the file understand

25
00:01:08.300 --> 00:01:09.815
what's going on with the change.

26
00:01:09.815 --> 00:01:12.350
The generated file is
usually referred to as

27
00:01:12.350 --> 00:01:15.130
a diff file or
sometimes a patch file.

28
00:01:15.130 --> 00:01:16.880
It includes all the changes

29
00:01:16.880 --> 00:01:19.020
between the old file
and the new one,

30
00:01:19.020 --> 00:01:21.769
plus the additional context
needed to understand

31
00:01:21.769 --> 00:01:23.390
the changes and to apply

32
00:01:23.390 --> 00:01:25.960
those changes back to
the original file.

33
00:01:25.960 --> 00:01:28.820
Now, say you're the one
receiving a diff file with

34
00:01:28.820 --> 00:01:31.730
a change and you want to
apply it to a script you wrote.

35
00:01:31.730 --> 00:01:34.490
You could read the diff file
you receive carefully and

36
00:01:34.490 --> 00:01:35.810
then manually go through the file

37
00:01:35.810 --> 00:01:36.880
that needs to be changed,

38
00:01:36.880 --> 00:01:38.600
and apply the modifications.

39
00:01:38.600 --> 00:01:40.550
But it sounds like a lot of

40
00:01:40.550 --> 00:01:43.565
manual work that could be
automated, don't you think?

41
00:01:43.565 --> 00:01:45.560
Well, it sure is.

42
00:01:45.560 --> 00:01:49.025
There's a command called
patch to do exactly this.

43
00:01:49.025 --> 00:01:50.930
Patch takes a file generated by

44
00:01:50.930 --> 00:01:53.915
diff and applies the changes
to the original file.

45
00:01:53.915 --> 00:01:55.805
Let's check this
out in an example.

46
00:01:55.805 --> 00:01:57.980
Say we have a small script
that checks whether

47
00:01:57.980 --> 00:02:01.680
the computer is under too
much load, like this one.

48
00:02:05.900 --> 00:02:09.300
This script uses the
psutil module to check

49
00:02:09.300 --> 00:02:12.010
the percentage of the CPU
that's currently in use.

50
00:02:12.010 --> 00:02:13.975
When the load is
above a threshold,

51
00:02:13.975 --> 00:02:15.730
in this case 75 percent,

52
00:02:15.730 --> 00:02:17.770
it prints a message
with an error.

53
00:02:17.770 --> 00:02:19.660
When it's under the threshold,

54
00:02:19.660 --> 00:02:21.240
it says that everything's okay.

55
00:02:21.240 --> 00:02:23.390
Now, we've shared
this script with

56
00:02:23.390 --> 00:02:24.980
a few colleagues and one of them

57
00:02:24.980 --> 00:02:27.305
tells us that the script
doesn't work correctly.

58
00:02:27.305 --> 00:02:30.200
Even if a computer is
completely overloaded,

59
00:02:30.200 --> 00:02:31.985
the script will say
that everything's okay.

60
00:02:31.985 --> 00:02:34.280
Our colleague is so
helpful that they

61
00:02:34.280 --> 00:02:36.890
sent us a diff with the
fix for our problem.

62
00:02:36.890 --> 00:02:45.530
Let's check that one out. We can

63
00:02:45.530 --> 00:02:47.525
see that our colleague
made two changes.

64
00:02:47.525 --> 00:02:49.820
They added a one
as a parameter to

65
00:02:49.820 --> 00:02:53.420
the CPU percent function and
they added a debugging line,

66
00:02:53.420 --> 00:02:55.985
that prints the value
returned by the function.

67
00:02:55.985 --> 00:02:58.730
Our colleague explains
that by calling

68
00:02:58.730 --> 00:03:01.910
the CPU percent function
without a parameter,

69
00:03:01.910 --> 00:03:04.925
we were not averaging
over a period of time,

70
00:03:04.925 --> 00:03:07.460
and so the call
always returns zero.

71
00:03:07.460 --> 00:03:09.930
So we have the diff file

72
00:03:09.930 --> 00:03:11.750
and we want to apply
it to our script.

73
00:03:11.750 --> 00:03:14.930
How do we do that? We'll
use the patch command.

74
00:03:14.930 --> 00:03:17.090
We'll pass the name of
the file that we want to

75
00:03:17.090 --> 00:03:20.075
patch in this case, cpu_usage.py,

76
00:03:20.075 --> 00:03:22.990
as the first parameter
to the command

77
00:03:22.990 --> 00:03:24.700
and then we'll provide the diff

78
00:03:24.700 --> 00:03:26.570
file through standard input.

79
00:03:26.570 --> 00:03:28.520
Do you remember how to do that?

80
00:03:28.520 --> 00:03:31.520
We will use the less
than symbol to redirect

81
00:03:31.520 --> 00:03:32.960
the contents of the file to

82
00:03:32.960 --> 00:03:36.000
standard input. Let's
check this out.

83
00:03:43.420 --> 00:03:47.480
So we told patch to apply
the changes that come from

84
00:03:47.480 --> 00:03:52.170
cpu_usage.diff to our
cpu_usage.py file.

85
00:03:52.170 --> 00:03:55.490
We get one single line that
says the file was patched,

86
00:03:55.490 --> 00:03:58.310
which means that we've
successfully applied the changes.

87
00:03:58.310 --> 00:03:59.690
Let's verify that by

88
00:03:59.690 --> 00:04:02.400
looking at the contents
of our script.

89
00:04:04.820 --> 00:04:07.940
Nice. We see that our file was

90
00:04:07.940 --> 00:04:10.940
modified with the changes that
we got from our colleague.

91
00:04:10.940 --> 00:04:13.310
The CPU percent function
is being called with

92
00:04:13.310 --> 00:04:16.915
a parameter of one and the
debugging line is printed.

93
00:04:16.915 --> 00:04:19.170
Once we're happy with the script,

94
00:04:19.170 --> 00:04:20.630
we could remove the
debugging line.

95
00:04:20.630 --> 00:04:22.490
But for now, we'll
leave it in there.

96
00:04:22.490 --> 00:04:24.290
You might be wondering, why go

97
00:04:24.290 --> 00:04:26.150
through all this trouble diffing,

98
00:04:26.150 --> 00:04:29.075
and patching, and not just
send the whole file instead?

99
00:04:29.075 --> 00:04:31.235
There are a few reasons for this.

100
00:04:31.235 --> 00:04:32.690
The main reason is that

101
00:04:32.690 --> 00:04:34.820
the original code
could have changed.

102
00:04:34.820 --> 00:04:37.715
In our example, it's
possible that the code

103
00:04:37.715 --> 00:04:39.350
our colleague was
using to prepare

104
00:04:39.350 --> 00:04:41.785
the fix wasn't the
latest version.

105
00:04:41.785 --> 00:04:44.640
By using a diff instead
of the whole file,

106
00:04:44.640 --> 00:04:46.830
we can clearly see
what they changed,

107
00:04:46.830 --> 00:04:49.040
no matter which version
they were using.

108
00:04:49.040 --> 00:04:50.720
The patch command can

109
00:04:50.720 --> 00:04:52.280
detect that there
were changes made to

110
00:04:52.280 --> 00:04:56.045
the file and will do its best
to apply the diff anyways.

111
00:04:56.045 --> 00:05:00.185
It won't always succeed
but in many cases it will.

112
00:05:00.185 --> 00:05:02.260
Another reason is structure.

113
00:05:02.260 --> 00:05:05.390
In this case we're patching
a single small file.

114
00:05:05.390 --> 00:05:07.850
But sometimes, you
might be modifying

115
00:05:07.850 --> 00:05:10.840
a bunch of large files
inside of a huge project.

116
00:05:10.840 --> 00:05:13.040
Say you are changing
four files in

117
00:05:13.040 --> 00:05:16.580
a project tree that contain
100 different files,

118
00:05:16.580 --> 00:05:18.035
arranged in different directories

119
00:05:18.035 --> 00:05:19.355
according to what they do.

120
00:05:19.355 --> 00:05:21.800
If you were to send
the whole files,

121
00:05:21.800 --> 00:05:23.450
you'd need to specify where

122
00:05:23.450 --> 00:05:25.550
those files were
supposed to be placed.

123
00:05:25.550 --> 00:05:26.910
As we called out,

124
00:05:26.910 --> 00:05:29.190
we can diff whole
directory structures

125
00:05:29.190 --> 00:05:31.430
and in that case
the diff file can

126
00:05:31.430 --> 00:05:33.320
specify where each
change file should

127
00:05:33.320 --> 00:05:36.260
be without us having to
do any manual juggling.

128
00:05:36.260 --> 00:05:39.515
Cool right? Okay, great work.

129
00:05:39.515 --> 00:05:42.200
We've now seen how to
generate diff files and

130
00:05:42.200 --> 00:05:44.795
how to apply their contents
with the patch command.

131
00:05:44.795 --> 00:05:46.129
In the next video,

132
00:05:46.129 --> 00:05:48.020
we'll put all this
together to look at

133
00:05:48.020 --> 00:05:51.840
a real-world example of
how to use diff and patch.