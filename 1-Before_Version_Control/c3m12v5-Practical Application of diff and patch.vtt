WEBVTT

1
00:00:00.000 --> 00:00:06.598
[MUSIC]

2
00:00:09.216 --> 00:00:10.360
Imagine this,

3
00:00:10.360 --> 00:00:16.020
a colleague is asking our help with
fixing a script named disk_usage.py.

4
00:00:16.020 --> 00:00:19.790
The goal of the script is to check how
much disk space is currently used, and

5
00:00:19.790 --> 00:00:23.430
print an error if it's too little
space for normal operation.

6
00:00:23.430 --> 00:00:27.000
But the script is currently
broken because it has a few bugs.

7
00:00:27.000 --> 00:00:31.300
We’ll help our colleague fix those bugs
to demonstrate how to use diff and patch.

8
00:00:31.300 --> 00:00:34.631
Before we change anything,
let’s make a couple copies of the script.

9
00:00:34.631 --> 00:00:39.065
We'll add _original to one copy,
which we’ll keep unmodified and use for

10
00:00:39.065 --> 00:00:43.646
comparison and _fixed to the other copy,
which we’ll use to repair our fix.

11
00:01:05.573 --> 00:01:09.777
Okay, now that we have our copies,
we'll edit the _fixed version and

12
00:01:09.777 --> 00:01:10.837
actually fix it.

13
00:01:15.697 --> 00:01:16.721
This file has a bunch of code.

14
00:01:16.721 --> 00:01:20.222
Before we try to understand what
it does and what's wrong with it,

15
00:01:20.222 --> 00:01:22.235
let's execute it and see what we get.

16
00:01:30.036 --> 00:01:33.640
The Python interpreter isn't too happy.

17
00:01:33.640 --> 00:01:36.890
It's complaining that there's
a return outside of function.

18
00:01:36.890 --> 00:01:38.040
And if we look at the code,

19
00:01:38.040 --> 00:01:40.930
we can clearly see that there's a return
that's not inside any function.

20
00:01:42.040 --> 00:01:43.810
You might remember that in Python,

21
00:01:43.810 --> 00:01:47.040
we can only use return
statements inside functions.

22
00:01:47.040 --> 00:01:48.460
So how do we fix this?

23
00:01:48.460 --> 00:01:49.870
There's a couple options.

24
00:01:49.870 --> 00:01:51.970
We could turn the current
code into a function and

25
00:01:51.970 --> 00:01:54.730
then call that function from
the main part of our script.

26
00:01:54.730 --> 00:01:58.690
Or we could use sys.exit to make
the return number of the exit

27
00:01:58.690 --> 00:02:00.190
code of our script,

28
00:02:00.190 --> 00:02:04.550
which is the code that causes a program to
exit with the corresponding exit value.

29
00:02:04.550 --> 00:02:06.268
For now, let's go with the second option.

30
00:02:27.027 --> 00:02:28.684
Okay, we've made the change.

31
00:02:28.684 --> 00:02:30.966
Let's execute this new
version of our script.

32
00:02:38.836 --> 00:02:40.477
Darn, we fixed the syntax error,

33
00:02:40.477 --> 00:02:44.790
but now the script is telling us we
don't have enough space on our disk.

34
00:02:44.790 --> 00:02:48.200
But we know that we actually do
have some free space, right?

35
00:02:48.200 --> 00:02:49.520
What's up with that?

36
00:02:49.520 --> 00:02:51.200
If you look closely at the code,

37
00:02:51.200 --> 00:02:54.160
you might notice that the script
is converting to gigabytes twice.

38
00:02:55.360 --> 00:03:01.340
The function call to check_disk_usage
is passing 2 times 2 double star 30.

39
00:03:01.340 --> 00:03:05.380
You might remember that the double star
operator is used to calculate powers.

40
00:03:05.380 --> 00:03:11.190
In this case, 2 to the power of 30,
which is how many bytes are in a gigabyte.

41
00:03:11.190 --> 00:03:13.863
So, this would be 2 gigabytes, but

42
00:03:13.863 --> 00:03:20.100
that be if the check_disk_usage function
was expecting a value in bytes.

43
00:03:20.100 --> 00:03:23.340
If we look at the code of the function,
we can see that it's

44
00:03:23.340 --> 00:03:27.470
already dividing the amount of free
bytes by 2 to the power of 30.

45
00:03:27.470 --> 00:03:31.178
So in other words,
we're doing the gigabyte conversion twice.

46
00:03:31.178 --> 00:03:35.740
Once when calling the function and
once inside the function.

47
00:03:35.740 --> 00:03:37.510
We need to get rid of one of them.

48
00:03:37.510 --> 00:03:38.786
Let's change how we call the function.

49
00:03:46.036 --> 00:03:47.570
Okay, let's try it out again.

50
00:03:51.083 --> 00:03:53.241
It works now.

51
00:03:53.241 --> 00:03:55.894
Okay, now we need to send
a fixed to our colleague so

52
00:03:55.894 --> 00:03:57.580
that they can fix their script.

53
00:03:58.720 --> 00:03:59.480
To do that, we'll use

54
00:03:59.480 --> 00:04:01.646
a technique we just learned to
generate a diff file, like this.

55
00:04:22.342 --> 00:04:24.907
Let's check the contents of
the diff using the cat command.

56
00:04:33.266 --> 00:04:34.110
Awesome.

57
00:04:34.110 --> 00:04:35.923
This seems to have what we want.

58
00:04:35.923 --> 00:04:39.170
So this is what we need to send to our
colleague to have them patch their file.

59
00:04:39.170 --> 00:04:40.843
How would they do that?

60
00:04:40.843 --> 00:04:43.067
They would run the patch
command like this.

61
00:04:51.965 --> 00:04:53.847
By calling patch with the diff file,

62
00:04:53.847 --> 00:04:57.137
we've applied the changes that
were necessary to fix the bugs.

63
00:04:57.137 --> 00:05:00.223
Let's check that disk_usage.py
now executes successfully.

64
00:05:07.534 --> 00:05:08.248
Success.

65
00:05:08.248 --> 00:05:12.407
So we've now seen how we can look at
differences between files, generate diff

66
00:05:12.407 --> 00:05:16.766
files together to gather our changes, and
then apply those changes using patch.

67
00:05:16.766 --> 00:05:19.180
But this is still a very manual process,

68
00:05:19.180 --> 00:05:22.750
where version control
systems can really help.

69
00:05:22.750 --> 00:05:25.210
But before we jump into that,
in the next cheat sheet,

70
00:05:25.210 --> 00:05:27.810
you'll find a summary of
the commands we just covered.

71
00:05:27.810 --> 00:05:28.720
So check that out and

72
00:05:28.720 --> 00:05:32.130
then head over to the practice quiz to
make sure you've got a grasp on all this.